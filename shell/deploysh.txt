openssl rand -hex 10

/etc/network/interfaces
# The external network interface
auto INTERFACE_NAME
iface INTERFACE_NAME inet manual
up ip link set dev $IFACE up
down ip link set dev $IFACE down

/etc/hosts
# controller controller
10.88.88.2
# network network
10.88.88.3 
# compute1 compute1
10.88.88.4

ping -c 4 openstack.org

####controller node
apt-get install ntp

/etc/ntp.conf 
server NTP_SERVER iburst
restrict -4 default kod notrap nomodify
restrict -6 default kod notrap nomodify

service ntp restart

####Other nodes
apt-get install ntp

/etc/ntp.conf
server controller iburst

service ntp restart

##verify
####controller node
ntpq -c peers
ntpq -c assoc
####all other nodes
ntpq -c peers
ntpq -c assoc

##

####all nodes
apt-get install ubuntu-cloud-keyring

echo "deb http://ubuntu-cloud.archive.canonical.com/ubuntu" \
"trusty-updates/juno main" > /etc/apt/sources.list.d/cloudarchive-juno.list

apt-get update && apt-get dist-upgrade

####controller node
apt-get install mariadb-server python-mysqldb

/etc/mysql/my.cnf
[mysqld]
...
bind-address = 10.88.88.2
default-storage-engine = innodb
innodb_file_per_table
collation-server = utf8_general_ci
init-connect = 'SET NAMES utf8'
character-set-server = utf8

service mysql restart
mysql_secure_installation

apt-get install rabbitmq-server
rabbitmqctl change_password guest engine
rabbitmqctl status | grep rabbit
service rabbitmq-server restart

mysql -u root -p
CREATE DATABASE keystone;
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
IDENTIFIED BY 'engine';
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
IDENTIFIED BY 'engine';

openssl rand -hex 10
apt-get install keystone python-keystoneclient

/etc/keystone/keystone.conf
[DEFAULT]
...
admin_token = ADMIN_TOKEN
verbose = True
[database]
...
connection = mysql://keystone:engine@controller/keystone
[token]
...
provider = keystone.token.providers.uuid.Provider
driver = keystone.token.persistence.backends.sql.Token
[revoke]
...
driver = keystone.contrib.revoke.backends.sql.Revoke

su -s /bin/sh -c "keystone-manage db_sync" keystone
service keystone restart
rm -f /var/lib/keystone/keystone.db

(crontab -l -u keystone 2>&1 | grep -q token_flush) || \
echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/
keystone-tokenflush.log 2>&1' \
>> /var/spool/cron/crontabs/keystone


export OS_SERVICE_TOKEN=ADMIN_TOKEN
export OS_SERVICE_ENDPOINT=http://controller:35357/v2.0
keystone tenant-create --name admin --description "Admin Tenant"
keystone user-create --name admin --pass engine --email EMAIL_ADDRESS
keystone role-create --name admin
keystone user-role-add --user admin --tenant admin --role admin
keystone tenant-create --name demo --description "Demo Tenant"
keystone user-create --name demo --tenant demo --pass DEMO_PASS --email EMAIL_ADDRESS
keystone tenant-create --name service --description "Service Tenant"
keystone service-create --name keystone --type identity --description "OpenStack Identity"

keystone endpoint-create \
--service-id $(keystone service-list | awk '/ identity / {print $2}') \
--publicurl http://controller:5000/v2.0 \
--internalurl http://controller:5000/v2.0 \
--adminurl http://controller:35357/v2.0 \
--region regionOne

##verify
unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT

keystone --os-tenant-name admin --os-username admin --os-password engine \
--os-auth-url http://controller:35357/v2.0 token-get

keystone --os-tenant-name admin --os-username admin --os-password engine \
--os-auth-url http://controller:35357/v2.0 tenant-list

keystone --os-tenant-name admin --os-username admin --os-password engine \
--os-auth-url http://controller:35357/v2.0 user-list

keystone --os-tenant-name admin --os-username admin --os-password engine \
--os-auth-url http://controller:35357/v2.0 role-list

keystone --os-tenant-name demo --os-username demo --os-password engine \
--os-auth-url http://controller:35357/v2.0 token-get

keystone --os-tenant-name demo --os-username demo --os-password engine \
--os-auth-url http://controller:35357/v2.0 user-list

##

source admin-openrc.sh
export OS_TENANT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=engine
export OS_AUTH_URL=http://controller:35357/v2.0

source demo-openrc.sh
export OS_TENANT_NAME=demo
export OS_USERNAME=demo
export OS_PASSWORD=engine
export OS_AUTH_URL=http://controller:5000/v2.0

mysql -u root -p
CREATE DATABASE glance;
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
IDENTIFIED BY 'engine';
GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
IDENTIFIED BY 'engine';

source admin-openrc.sh
keystone user-create --name glance --pass engine
keystone user-role-add --user glance --tenant service --role admin

keystone service-create --name glance --type image \
--description "OpenStack Image Service"

keystone endpoint-create \
--service-id $(keystone service-list | awk '/ image / {print $2}') \
--publicurl http://controller:9292 \
--internalurl http://controller:9292 \
--adminurl http://controller:9292 \
--region regionOne

apt-get install glance python-glanceclient

/etc/glance/glance-api.conf
[database]
connection = mysql://glance:engine@controller/glance
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = glance
admin_password = engine
[paste_deploy]
flavor = keystone
[glance_store]
default_store = file
filesystem_store_datadir = /var/lib/glance/images/
[DEFAULT]
notification_driver = noop
verbose = True

/etc/glance/glance-registry.conf
[database]
connection = mysql://glance:engine@controller/glance
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = glance
admin_password = engine
[paste_deploy]
flavor = keystone
[DEFAULT]
notification_driver = noop
verbose = True

su -s /bin/sh -c "glance-manage db_sync" glance
service glance-registry restart
service glance-api restart
rm -f /var/lib/glance/glance.sqlite

##verify
mkdir /tmp/images
wget -P /tmp/images http://cdn.download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img
source admin-openrc.sh

glance image-create --name "cirros-0.3.3-x86_64" --file /tmp/images/
cirros-0.3.3-x86_64-disk.img \
--disk-format qcow2 --container-format bare --is-public True --progress

glance image-list

rm -r /tmp/images

##

mysql -u root -p
CREATE DATABASE nova;
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' \
IDENTIFIED BY 'engine';
GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' \
IDENTIFIED BY 'engine';

source admin-openrc.sh
keystone user-create --name nova --pass engine
keystone user-role-add --user nova --tenant service --role admin

keystone service-create --name nova --type compute \
--description "OpenStack Compute"

keystone endpoint-create \
--service-id $(keystone service-list | awk '/ compute / {print $2}') \
--publicurl http://controller:8774/v2/%\(tenant_id\)s \
--internalurl http://controller:8774/v2/%\(tenant_id\)s \
--adminurl http://controller:8774/v2/%\(tenant_id\)s \
--region regionOne

apt-get install nova-api nova-cert nova-conductor nova-consoleauth \
nova-novncproxy nova-scheduler python-novaclient

/etc/nova/nova.conf
[database]
connection = mysql://nova:engine@controller/nova
[DEFAULT]
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = engine
auth_strategy = keystone
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = nova
admin_password = engine
my_ip = 10.88.88.2
vncserver_listen = 10.88.88.2
vncserver_proxyclient_address = 10.88.88.2
verbose = True
[glance]
host = controller

su -s /bin/sh -c "nova-manage db sync" nova
service nova-api restart
service nova-cert restart
service nova-consoleauth restart
service nova-scheduler restart
service nova-conductor restart
service nova-novncproxy restart

rm -f /var/lib/nova/nova.sqlite

####compute node
apt-get install nova-compute sysfsutils

/etc/nova/nova.conf 
[DEFAULT]
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = engine
auth_strategy = keystone
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = nova
admin_password = NOVA_PASS
my_ip = 10.88.88.4
vnc_enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = 10.88.88.4
novncproxy_base_url = http://controller:6080/vnc_auto.html
verbose = True
[glance]
host = controller

egrep -c '(vmx|svm)' /proc/cpuinfo

/etc/nova/nova-compute.conf
[libvirt]
virt_type = qemu

service nova-compute restart
rm -f /var/lib/nova/nova.sqlite

##verify
####controller node
source admin-openrc.sh
nova service-list
nova image-list

##

####controller node
mysql -u root -p
CREATE DATABASE neutron;
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' \
IDENTIFIED BY 'engine';
GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' \
IDENTIFIED BY 'engine';

source admin-openrc.sh
keystone user-create --name neutron --pass engine
keystone user-role-add --user neutron --tenant service --role admin

keystone service-create --name neutron --type network \
--description "OpenStack Networking"

keystone endpoint-create \
--service-id $(keystone service-list | awk '/ network / {print $2}') \
--publicurl http://controller:9696 \
--adminurl http://controller:9696 \
--internalurl http://controller:9696 \
--region regionOne

apt-get install neutron-server neutron-plugin-ml2 python-neutronclient

/etc/neutron/neutron.conf 
[database]
connection = mysql://neutron:engine@controller/neutron
[DEFAULT]
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = engine
auth_strategy = keystone
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True
verbose = True
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = engine

source admin-openrc.sh
keystone tenant-get service

/etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch
[ml2_type_gre]
tunnel_id_ranges = 1:1000
[securitygroup]
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.
OVSHybridIptablesFirewallDriver

/etc/nova/nova.conf
[DEFAULT]
...
network_api_class = nova.network.neutronv2.api.API
security_group_api = neutron
linuxnet_interface_driver = nova.network.linux_net.
LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver
[neutron]
...
url = http://controller:9696
auth_strategy = keystone
admin_auth_url = http://controller:35357/v2.0
admin_tenant_name = service
admin_username = neutron
admin_password = engine

su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \
--config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade juno" neutron

service nova-api restart
service nova-scheduler restart
service nova-conductor restart
service neutron-server restart

##verify
####controller node
source admin-openrc.sh
neutron ext-list

##

####network node
/etc/sysctl.conf
net.ipv4.ip_forward=1
net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.default.rp_filter=0

sysctl -p

apt-get install neutron-plugin-ml2 neutron-plugin-openvswitch-agent \
neutron-l3-agent neutron-dhcp-agent

/etc/neutron/neutron.conf 
[DEFAULT]
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = engine
auth_strategy = keystone
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True
verbose = True
[keystone_authtoken]
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = engine

/etc/neutron/plugins/ml2/ml2_conf.ini
[ml2]
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch
[ml2_type_flat]
flat_networks = external
[ml2_type_gre]
tunnel_id_ranges = 1:1000
[securitygroup]
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver
[ovs]
local_ip = INSTANCE_TUNNELS_INTERFACE_IP_ADDRESS
enable_tunneling = True
bridge_mappings = external:br-ex
[agent]
tunnel_types = gre

/etc/neutron/l3_agent.ini
[DEFAULT]
interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
use_namespaces = True
external_network_bridge = br-ex
router_delete_namespaces = True
verbose = True

/etc/neutron/dhcp_agent.ini
[DEFAULT]
interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
use_namespaces = True
dhcp_delete_namespaces = True
verbose = True
dnsmasq_config_file = /etc/neutron/dnsmasq-neutron.conf

/etc/neutron/dnsmasq-neutron.conf
dhcp-option-force=26,1454

pkill dnsmasq

/etc/neutron/metadata_agent.ini
[DEFAULT]
...
auth_url = http://controller:5000/v2.0
auth_region = regionOne
admin_tenant_name = service
admin_user = neutron
admin_password = engine
nova_metadata_ip = controller
metadata_proxy_shared_secret = engine
verbose = True

####controller node
/etc/nova/nova.conf
[neutron]
...
service_metadata_proxy = True
metadata_proxy_shared_secret = engine

service nova-api restart

####network node
service openvswitch-switch restart
ovs-vsctl add-br br-ex
ovs-vsctl add-port br-ex eth2
ethtool -K eth2 gro off
service neutron-plugin-openvswitch-agent restart
service neutron-l3-agent restart
service neutron-dhcp-agent restart
service neutron-metadata-agent restart

##verify
####controller node
source admin-openrc.sh
neutron agent-list

##

####compute node
/etc/sysctl.conf
net.ipv4.conf.all.rp_filter=0
net.ipv4.conf.default.rp_filter=0

sysctl -p
apt-get install neutron-plugin-ml2 neutron-plugin-openvswitch-agent

/etc/neutron/neutron.conf
[DEFAULT]
...
rpc_backend = rabbit
rabbit_host = controller
rabbit_password = engine
auth_strategy = keystone
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True
verbose = True
[keystone_authtoken]
...
auth_uri = http://controller:5000/v2.0
identity_uri = http://controller:35357
admin_tenant_name = service
admin_user = neutron
admin_password = engine

/etc/neutron/plugins/ml2/ml2_conf.ini 
[ml2]
...
type_drivers = flat,gre
tenant_network_types = gre
mechanism_drivers = openvswitch
[ml2_type_gre]
...
tunnel_id_ranges = 1:1000
[securitygroup]
...
enable_security_group = True
enable_ipset = True
firewall_driver = neutron.agent.linux.iptables_firewall.
OVSHybridIptablesFirewallDriver
[ovs]
...
local_ip = 10.88.89.4
enable_tunneling = True
[agent]
...
tunnel_types = gre

service openvswitch-switch restart

/etc/nova/nova.conf 
[DEFAULT]
...
network_api_class = nova.network.neutronv2.api.API
security_group_api = neutron
linuxnet_interface_driver = nova.network.linux_net.
LinuxOVSInterfaceDriver
firewall_driver = nova.virt.firewall.NoopFirewallDriver
[neutron]
...
url = http://controller:9696
auth_strategy = keystone
admin_auth_url = http://controller:35357/v2.0
admin_tenant_name = service
admin_username = neutron
admin_password = engine

service nova-compute restart
service neutron-plugin-openvswitch-agent restart

##verify
####controller node
source admin-openrc.sh
neutron agent-list

##

####controller node
source ~/admin-openrc.sh

neutron net-create ext-net --router:external True \
--provider:physical_network external --provider:network_type flat

neutron subnet-create ext-net --name ext-subnet \
--allocation-pool start=10.88.90.100,end=10.88.90.200 \
--disable-dhcp --gateway 10.88.90.1 10.88.90.0/24

source ~/demo-openrc.sh
neutron net-create demo-net

neutron subnet-create demo-net --name demo-subnet \
--gateway 10.88.91.1 10.88.91.0/24

neutron router-create demo-router
neutron router-interface-add demo-router demo-subnet
neutron router-gateway-set demo-router ext-net

##verify
Ping the tenant router gateway

ping -c 4 203.0.113.101
ping -c 4 10.88.90.1
##


####controller node
apt-get install openstack-dashboard apache2 libapache2-mod-wsgi memcached python-memcache

/etc/openstack-dashboard/local_settings.py
OPENSTACK_HOST = "controller"
ALLOWED_HOSTS = ['*']
CACHES = {
'default': {
'BACKEND': 'django.core.cache.backends.memcached.
MemcachedCache',
'LOCATION': '127.0.0.1:11211',
}
}
TIME_ZONE = "TIME_ZONE"

service apache2 restart
service memcached restart

##verify
http://10.88.88.2/horizon
using admin or demo

##

source ~/demo-openrc.sh
ssh-keygen
nova keypair-add --pub-key /home/clouder/id_rsa.pub demo-key
nova keypair-list
nova flavor-list
nova image-list
nova secgroup-list

nova boot --flavor m1.tiny --image cirros-0.3.3-x86_64 --nic net-id=ccfe5b17-4216-412c-a575-b1b06e5cde93 \
--security-group default --key-name demo-key demo-instance1

nova list
nova get-vnc-console demo-instance1 novnc

nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0
nova secgroup-add-rule default tcp 22 22 0.0.0.0/0
neutron floatingip-create ext-net
nova floating-ip-associate demo-instance1 203.0.113.102
nova list

http://10.88.88.2:6080/vnc_auto.html?token=9fe7cad0-289d-4bcd-94ad-6537c20fdb40




